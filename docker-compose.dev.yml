version: "3.8"

services:
    redis:
        image: redis:alpine
        networks:
            - backend_network

    db:
        image: postgis/postgis:14-3.2
        container_name: ${DB_NAME}
        restart: always
        ports:
            - ${DB_PORT}:${DB_PORT}
        volumes:
            - postgis_volume:/var/lib/postgresql/
        environment:
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=${DB_NAME}
        command: -p ${DB_PORT}
        networks:
            - backend_network

    web:
        env_file: .env
        build:
            context: .
            dockerfile: Dockerfile.dev
        container_name: csms_web
        restart: always
        command: tail -f /dev/null
        volumes:
            - .:/code
        ports:
          - "3000:3000"
        depends_on:
            - db
        networks:
            - backend_network
            - frontend_network

    worker:
        env_file: .env
        build:
            context: .
            dockerfile: Dockerfile.dev
        container_name: celery_worker
        restart: always
        command: "celery --app csms_web --workdir ./src worker --loglevel INFO"
        volumes:
            - .:/code
        depends_on:
            - db
            - redis
            - web
        networks:
            - backend_network
            - frontend_network

    beat:
        env_file: .env
        build:
            context: .
            dockerfile: Dockerfile.dev
        container_name: celery_beat
        restart: always
        command: "celery --app csms_web --workdir ./src beat --loglevel INFO"
        volumes:
            - .:/code
        depends_on:
            - db
            - redis
            - web
        networks:
            - backend_network
            - frontend_network

volumes:
    postgis_volume:

networks:
    frontend_network:
    backend_network:
         driver: bridge